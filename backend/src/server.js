const app = require('./app');
const { sequelize } = require('./models');
const { createDirectories } = require('./utils/fileSystem');

// Configuration du port
const PORT = process.env.PORT || 5000;

// Fonction pour d√©marrer le serveur
async function startServer() {
  try {
    console.log('üöÄ D√©marrage du serveur...');
    
    // Cr√©er les dossiers n√©cessaires
    await createDirectories();
    console.log('üìÅ Dossiers cr√©√©s avec succ√®s');
    
    // Tester la connexion √† la base de donn√©es
    console.log('üîå Connexion √† la base de donn√©es...');
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie avec succ√®s');
    
    // Synchroniser les mod√®les avec la base de donn√©es
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ Synchronisation des mod√®les...');
      await sequelize.sync({ alter: true });
      console.log('‚úÖ Mod√®les synchronis√©s avec succ√®s');
    }
    
    // D√©marrer le serveur
    const server = app.listen(PORT, () => {
      console.log(`üåü Serveur d√©marr√© sur le port ${PORT}`);
      console.log(`üåç Environnement: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üìç URL: http://localhost:${PORT}`);
      console.log(`üè• Health check: http://localhost:${PORT}/health`);
      console.log(`üìö API Info: http://localhost:${PORT}/api`);
    });
    
    // Configuration du timeout pour les requ√™tes
    server.timeout = 30000; // 30 secondes
    
    // Gestion gracieuse de l'arr√™t
    const gracefulShutdown = (signal) => {
      console.log(`\nüõë Signal ${signal} re√ßu. Arr√™t gracieux du serveur...`);
      
      server.close(async () => {
        console.log('üîå Fermeture des connexions HTTP...');
        
        try {
          await sequelize.close();
          console.log('üóÑÔ∏è Connexion √† la base de donn√©es ferm√©e');
        } catch (error) {
          console.error('‚ùå Erreur lors de la fermeture de la base de donn√©es:', error);
        }
        
        console.log('üëã Serveur arr√™t√© avec succ√®s');
        process.exit(0);
      });
      
      // Forcer l'arr√™t apr√®s 10 secondes
      setTimeout(() => {
        console.error('‚è∞ Timeout atteint, arr√™t forc√© du serveur');
        process.exit(1);
      }, 10000);
    };
    
    // √âcouter les signaux d'arr√™t
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
    
    return server;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    
    if (error.name === 'SequelizeConnectionError') {
      console.error('üîå Impossible de se connecter √† la base de donn√©es');
      console.error('V√©rifiez que PostgreSQL est d√©marr√© et que les param√®tres de connexion sont corrects');
    }
    
    process.exit(1);
  }
}

// D√©marrer le serveur si ce fichier est ex√©cut√© directement
if (require.main === module) {
  startServer();
}

module.exports = { startServer };